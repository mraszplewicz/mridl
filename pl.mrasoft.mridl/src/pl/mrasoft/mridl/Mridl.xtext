grammar pl.mrasoft.mridl.Mridl with org.eclipse.xtext.common.Terminals

generate mridl "http://mrasoft.pl/mridl/Mridl"

Mridl:
	(documentation=Documentation)?
	"namespace" nsUri=STRING
	(imports+=Import)*
	((operations+=Operation)* &
	(interfaces+=Interface)*)
	((typeDeclarations+=TopLevelType)* &
	(topLevelElements+=TopLevelElement)*);

Import:
	"import" importURI=ImportMridlUri "as" nsPrefix=ID;

ImportMridlUri:
	STRING | (((ID | ".." | ".") "/")* ID ".mridl");

Operation:
	(documentation=Documentation)?
	"operation" (returnType=NonRefElement | void?="void") name=ID
	"(" (params+=Element
	("," params+=Element)*)? ")"
	("throws" (faults+=Fault ("," faults+=Fault)*))?;

Interface:
	"interface" name=ID "{" (operations+=Operation)* "}";

TopLevelComplexType:
	(abstract?="abstract")? "complex" name=ID ("extends" extends=TopLevelComplexTypeReference)?
	"{" (elements+=Element)* "}";

TopLevelSimpleType:
	"simple" name=ID (body=SimpleTypeBody);

TopLevelEnumType:
	"enum" name=ID "{" (values+=EnumValue)* "}";

TopLevelElement:
	(documentation=Documentation)? "element" typeDeclaration=ElementTypeDeclaration name=ID;

EnumValue:
	(documentation=Documentation)? value=ID;

ElementTypeDeclaration:
	type=NamedTypeReference (multiplicity=Multiplicity)?;

AbstractElement:
	Element | TopLevelElement;

NonRefElement:
	(documentation=Documentation)? typeDeclaration=ElementTypeDeclaration name=ID;

RefElement:
	(documentation=Documentation)? "ref" typeDeclaration=ElementTypeDeclaration name=ID;

Element:
	NonRefElement | RefElement;

Fault:
	(documentation=Documentation)? element=TopLevelElementReference;

NamedTypeReference:
	TopLevelTypeReference | XsdBuiltinTypeReference;

TopLevelTypeReference:
	DirectTopLevelTypeReference | ImportedTopLevelTypeReference;

TopLevelSimpleTypeReference:
	DirectTopLevelSimpleTypeReference | ImportedTopLevelSimpleTypeReference;

TopLevelComplexTypeReference:
	DirectTopLevelComplexTypeReference | ImportedTopLevelComplexTypeReference;

XsdBuiltinTypeReference:
	ref=XsdBuiltinType;

TopLevelElementReference:
	DirectTopLevelElementReference | ImportedTopLevelElementReference;

DirectTopLevelTypeReferenceBase:
	DirectTopLevelTypeReference | DirectTopLevelSimpleTypeReference | DirectTopLevelComplexTypeReference;

DirectTopLevelTypeReference:
	ref=[TopLevelType];

DirectTopLevelSimpleTypeReference:
	ref=[TopLevelSimpleType];

DirectTopLevelComplexTypeReference:
	ref=[TopLevelComplexType];

ImportedTopLevelTypeReferenceBase:
	ImportedTopLevelTypeReference | ImportedTopLevelSimpleTypeReference | ImportedTopLevelComplexTypeReference;

ImportedTopLevelTypeReference:
	importRef=ImportReference ref=[TopLevelType];

ImportedTopLevelSimpleTypeReference:
	importRef=ImportReference ref=[TopLevelSimpleType];

ImportedTopLevelComplexTypeReference:
	importRef=ImportReference ref=[TopLevelComplexType];

DirectTopLevelElementReference:
	ref=[TopLevelElement];

ImportedTopLevelElementReference:
	importRef=ImportReference ref=[TopLevelElement];

ImportReference:
	^import=[Import|ID] ":";

XsdBuiltinType:
	XsdBuiltinTypeWithDigits | XsdBuiltinTypeWithMaxLength;

TopLevelType:
	TopLevelComplexType | TopLevelSimpleType | TopLevelEnumType;

Multiplicity:
	SpecifiedMultiplicity | UnspecifiedMultiplicity | Optional;

SpecifiedMultiplicity:
	{SpecifiedMultiplicity} "[" (lower=INT "..") (upper=INT | unbounded?="*") "]";

UnspecifiedMultiplicity:
	{UnspecifiedMultiplicity} "[]";

Optional:
	{Optional} "?";

SimpleTypeBody:
	"{" "base" base=NamedSimpleTypeReference (patternRestriction=PatternRestriction)? "}";

PatternRestriction:
	"pattern" pattern=STRING;

NamedSimpleTypeReference:
	TopLevelSimpleTypeReference | XsdBuiltinTypeReference;

XsdBuiltinTypeWithDigits:
	declaration=XsdBuiltinTypeCanHaveDigits (digitsSpec=DigitsSpecification)?;

XsdBuiltinTypeWithMaxLength:
	declaration=XsdBuiltinTypeCanHaveMaxLength (lengthSpec=MaxLengthSpecification)?;

MaxLengthSpecification:
	"(" maxLength=INT ")";

DigitsSpecification:
	TotalAndFractionDigitsSpecification | TotalDigitsSpecification | FractionDigitsSpecification;

TotalAndFractionDigitsSpecification:
	"(" totalDigits=INT "," fractionDigits=INT ")";

TotalDigitsSpecification:
	"(" totalDigits=INT ")";

FractionDigitsSpecification:
	"(" "," fractionDigits=INT ")";

enum XsdBuiltinTypeDeclaration:
	decimal
	| anyType
	| anySimpleType
	| anyAtomicType
	| anyURI
	| base64Binary
	| boolean
	| date
	| dateTime
	| dateTimeStamp
	| integer
	| long
	| int
	| short
	| byte
	| nonNegativeInteger
	| positiveInteger
	| unsignedLong
	| unsignedInt
	| unsignedShort
	| unsignedByte
	| nonPositiveInteger
	| negativeInteger
	| double
	| duration
	| dayTimeDuration
	| yearMonthDuration
	| float
	| gDay
	| gMonth
	| gMonthDay
	| gYear
	| gYearMonth
	| hexBinary
	| NOTATION
	| precisionDecimal
	| QName
	| string
	| normalizedString
	| token
	| language
	| Name
	| NCName
	| ENTITY
	| ID
	| IDREF
	| NMTOKEN
	| time
	| ENTITIES
	| IDREFS
	| NMTOKENS;

	//some types will not be fully supported
enum XsdBuiltinTypeCanHaveDigits returns XsdBuiltinTypeDeclaration:
	decimal;

enum XsdBuiltinTypeCanHaveMaxLength returns XsdBuiltinTypeDeclaration:
	anyType
	| anySimpleType
	| anyAtomicType
	| anyURI
	| base64Binary
	| boolean
	| date
	| dateTime
	| dateTimeStamp
	| integer
	| long
	| int
	| short
	| byte
	| nonNegativeInteger
	| positiveInteger
	| unsignedLong
	| unsignedInt
	| unsignedShort
	| unsignedByte
	| nonPositiveInteger
	| negativeInteger
	| double
	| duration
	| dayTimeDuration
	| yearMonthDuration
	| float
	| gDay
	| gMonth
	| gMonthDay
	| gYear
	| gYearMonth
	| hexBinary
	| NOTATION
	| precisionDecimal
	| QName
	| string
	| normalizedString
	| token
	| language
	| Name
	| NCName
	| ENTITY
	| ID
	| IDREF
	| NMTOKEN
	| time
	| ENTITIES
	| IDREFS
	| NMTOKENS;

Documentation:
	doc=DOCUMENTATION_TERMINAL;

terminal DOCUMENTATION_TERMINAL:
	'(*'->'*)';	