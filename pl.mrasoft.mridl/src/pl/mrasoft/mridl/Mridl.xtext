grammar pl.mrasoft.mridl.Mridl with org.eclipse.xtext.common.Terminals

generate mridl "http://mrasoft.pl/mridl/Mridl"

Mridl:
	'namespace' nsUri=STRING
	(imports+=Import)*
	(operations+=Operation)*
	(typeDeclarations+=TopLevelType)*;

Import:
	"import" importURI=ImportMridlUri "as" nsPrefix=ID;

ImportMridlUri:
	STRING | (((ID | '..' | '.') '/')* ID '.mridl');

Operation:
	'operation' (returnType=Element | void?='void') name=ID
	'(' (params+=Element
	(',' params+=Element)*)? ')'
	("throws" (faults+=Fault (',' faults+=Fault)*))?;


TopLevelComplexType:
	"complex" name=ID "{" (elements+=Element)* "}";

TopLevelSimpleType:
	"simple" name=ID (restriction=PatternRestriction)?;

TopLevelEnumType:
	"enum" name=ID "{" (values+=EnumValue)* "}";

EnumValue:
	value=ID;

Element:
	type=NamedTypeReference (multiplicity=Multiplicity)? name=ID;

Fault:
	type=NamedTypeReference;

NamedTypeReference:
	TopLevelTypeReference | XsdBuiltinTypeReference;

TopLevelTypeReference:
	DirectTopLevelTypeReference | ImportedTopLevelTypeReference;

XsdBuiltinTypeReference:
	ref=XsdBuiltinType;

DirectTopLevelTypeReference:
	ref=[TopLevelType];

DirectTopLevelNonComplexTypeReference:
	ref=[TopLevelNonComplexType];

ImportedTopLevelTypeReference:
	importRef=ImportReference ref=[TopLevelType];

ImportedTopLevelNonComplexTypeReference:
	importRef=ImportReference ref=[TopLevelNonComplexType];

ImportReference:
	^import=[Import|ID] ":"; 

XsdBuiltinType:
	XsdBuiltinTypeWithDigits | XsdBuiltinTypeWithMaxLength;

TopLevelType:
	TopLevelComplexType | TopLevelNonComplexType;

TopLevelNonComplexType:
	TopLevelSimpleType | TopLevelEnumType;

Multiplicity:
	SpecifiedMultiplicity | UnspecifiedMultiplicity | Optional;

SpecifiedMultiplicity:
	{SpecifiedMultiplicity}
	"[" (lower=INT "..") (upper=INT | unbounded?="*") "]";

UnspecifiedMultiplicity:
	{UnspecifiedMultiplicity}
	"[]";

Optional:
	{Optional}
	"?";

PatternRestriction:
	"(" nonComplexType=NamedNonComplexTypeReference
	pattern=STRING ")";

NamedNonComplexTypeReference:
	TopLevelNonComplexTypeReference | XsdBuiltinTypeReference;

TopLevelNonComplexTypeReference:
	DirectTopLevelNonComplexTypeReference | ImportedTopLevelNonComplexTypeReference;

XsdBuiltinTypeWithDigits:
	declaration=XsdBuiltinTypeCanHaveDigits (digitsSpec=DigitsSpecification)?;

XsdBuiltinTypeWithMaxLength:
	declaration=XsdBuiltinTypeCanHaveMaxLength (lengthSpec=MaxLengthSpecification)?;

MaxLengthSpecification:
	"(" maxLength=INT ")";

DigitsSpecification:
	"(" totalDigits=INT "," fractionDigits=INT ")";

	//some types will not be fully supported
enum XsdBuiltinTypeCanHaveDigits:
	decimal;

enum XsdBuiltinTypeCanHaveMaxLength:
	anyType
	| anySimpleType
	| anyAtomicType
	| anyURI
	| base64Binary
	| boolean
	| date
	| dateTime
	| dateTimeStamp
	| integer
	| long
	| int
	| short
	| byte
	| nonNegativeInteger
	| positiveInteger
	| unsignedLong
	| unsignedInt
	| unsignedShort
	| unsignedByte
	| nonPositiveInteger
	| negativeInteger
	| double
	| duration
	| dayTimeDuration
	| yearMonthDuration
	| float
	| gDay
	| gMonth
	| gMonthDay
	| gYear
	| gYearMonth
	| hexBinary
	| NOTATION
	| precisionDecimal
	| QName
	| string
	| normalizedString
	| token
	| language
	| Name
	| NCName
	| ENTITY
	| ID
	| IDREF
	| NMTOKEN
	| time
	| ENTITIES
	| IDREFS
	| NMTOKENS;
